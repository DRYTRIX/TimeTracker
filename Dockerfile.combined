FROM python:3.11-slim

# Install system dependencies including PostgreSQL
RUN apt-get update && apt-get install -y \
    curl \
    postgresql \
    postgresql-contrib \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create data and logs directories with proper permissions
RUN mkdir -p /data /app/logs /var/lib/postgresql/data && \
    chmod 755 /data && chmod 755 /app/logs && chmod 755 /var/lib/postgresql/data

# Make startup scripts executable
RUN chmod +x /app/docker/init-database.py /app/docker/test-db.py

# Create non-root user
RUN useradd -m -u 1000 timetracker && \
    chown -R timetracker:timetracker /app /data /app/logs /var/lib/postgresql/data

# Create PostgreSQL configuration
RUN mkdir -p /etc/postgresql/main && \
    echo "listen_addresses = '*'" > /etc/postgresql/main/postgresql.conf && \
    echo "port = 5432" >> /etc/postgresql/main/postgresql.conf && \
    echo "data_directory = '/var/lib/postgresql/data'" >> /etc/postgresql/main/postgresql.conf && \
    echo "log_destination = 'stderr'" >> /etc/postgresql/main/postgresql.conf && \
    echo "logging_collector = on" >> /etc/postgresql/main/postgresql.conf && \
    echo "log_directory = 'log'" >> /etc/postgresql/main/postgresql.conf && \
    echo "log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'" >> /etc/postgresql/main/postgresql.conf && \
    echo "log_rotation_age = 1d" >> /etc/postgresql/main/postgresql.conf && \
    echo "log_rotation_size = 10MB" >> /etc/postgresql/main/postgresql.conf

# Create PostgreSQL access configuration
RUN echo "local all all trust" > /etc/postgresql/main/pg_hba.conf && \
    echo "host all all 127.0.0.1/32 trust" >> /etc/postgresql/main/pg_hba.conf && \
    echo "host all all ::1/128 trust" >> /etc/postgresql/main/pg_hba.conf && \
    echo "host all all ::1/128 trust" >> /etc/postgresql/main/pg_hba.conf

# Find binary locations
RUN echo "--- Finding PostgreSQL binaries ---" && \
    find /usr -name "postgres" -type f 2>/dev/null | head -5 && \
    find /usr -name "initdb" -type f 2>/dev/null | head -5 && \
    find /usr -name "pg_ctl" -type f 2>/dev/null | head -5 && \
    find /usr -name "psql" -type f 2>/dev/null | head -5 && \
    echo "--- Checking PATH ---" && \
    echo $PATH && \
    echo "--- Checking which postgres ---" && \
    which postgres || echo "postgres not found in PATH"

# Create symlinks for PostgreSQL binaries and database initialization script
RUN find /usr -name "postgres" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/postgres && \
    find /usr -name "initdb" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/initdb && \
    find /usr -name "pg_ctl" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/pg_ctl && \
    find /usr -name "createdb" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/createdb && \
    find /usr -name "createuser" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/createuser && \
    find /usr -name "psql" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/psql && \
    find /usr -name "pg_isready" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/pg_isready && \
    echo "--- PostgreSQL binaries linked ---" && \
    ls -la /usr/bin/postgres* /usr/bin/initdb /usr/bin/pg_ctl /usr/bin/createdb /usr/bin/createuser /usr/bin/psql /usr/bin/pg_isready 2>/dev/null || echo "Some binaries not found"

# Copy database initialization script
COPY docker/init-db.sh /app/init-db.sh
RUN chmod +x /app/init-db.sh

# Copy supervisor configuration
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create startup script for Flask app with database initialization
RUN echo '#!/bin/bash\n\
set -e\n\
cd /app\n\
export FLASK_APP=app\n\
export DATABASE_URL=postgresql+psycopg2://timetracker@localhost:5432/timetracker\n\
\n\
echo "=== Starting TimeTracker with Combined Setup ==="\n\
\n\
# Initialize PostgreSQL if needed\n\
if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then\n\
    echo "Initializing PostgreSQL..."\n\
    su - postgres -c "/usr/bin/initdb -D /var/lib/postgresql/data"\n\
    echo "PostgreSQL initialized"\n\
fi\n\
\n\
# Start PostgreSQL in background\n\
echo "Starting PostgreSQL..."\n\
su - postgres -c "/usr/bin/postgres -D /var/lib/postgresql/data" &\n\
POSTGRES_PID=$!\n\
\n\
# Wait for PostgreSQL to be ready\n\
echo "Waiting for PostgreSQL..."\n\
sleep 10\n\
\n\
# Wait for PostgreSQL to actually be accepting connections\n\
echo "Checking PostgreSQL connection..."\n\
until su - postgres -c "/usr/bin/pg_isready -q"; do\n\
    echo "PostgreSQL is not ready yet, waiting..."\n\
    sleep 2\n\
done\n\
echo "PostgreSQL is ready!"\n\
\n\
# Create database and user\n\
echo "Setting up database..."\n\
su - postgres -c "/usr/bin/createdb timetracker" 2>/dev/null || echo "Database exists"\n\
su - postgres -c "/usr/bin/createuser -s timetracker" 2>/dev/null || echo "User exists"\n\
\n\
# Initialize schema if needed or if FORCE_REINIT is set\n\
if [ ! -f /var/lib/postgresql/data/.initialized ] || [ "$FORCE_REINIT" = "true" ]; then\n\
    echo "Initializing database schema..."\n\
    su - postgres -c "/usr/bin/psql -d timetracker -f /app/docker/init.sql"\n\
    touch /var/lib/postgresql/data/.initialized\n\
    echo "Schema initialized"\n\
fi\n\
\n\
# Wait for database to be ready for Python connection\n\
echo "Waiting for database to be ready for Python..."\n\
python - <<"PY"\n\
import os\n\
import time\n\
import sys\n\
from sqlalchemy import create_engine, text\n\
\n\
url = os.getenv("DATABASE_URL", "")\n\
if url.startswith("postgresql"):\n\
    for attempt in range(30):\n\
        try:\n\
            engine = create_engine(url, pool_pre_ping=True)\n\
            with engine.connect() as conn:\n\
                conn.execute(text("SELECT 1"))\n\
            print("Database connection established successfully")\n\
            break\n\
        except Exception as e:\n\
            print(f"Waiting for database... (attempt {attempt+1}/30): {e}")\n\
            time.sleep(2)\n\
    else:\n\
        print("Database not ready after waiting, exiting...")\n\
        sys.exit(1)\n\
else:\n\
    print("No PostgreSQL database configured, skipping connection check")\n\
PY\n\
\n\
echo "Checking if database is initialized..."\n\
# Check if database is initialized by looking for tables\n\
python - <<"PY"\n\
import os\n\
import sys\n\
from sqlalchemy import create_engine, text, inspect\n\
\n\
url = os.getenv("DATABASE_URL", "")\n\
if url.startswith("postgresql"):\n\
    try:\n\
        engine = create_engine(url, pool_pre_ping=True)\n\
        inspector = inspect(engine)\n\
        \n\
        # Check if our main tables exist\n\
        existing_tables = inspector.get_table_names()\n\
        required_tables = ["users", "projects", "time_entries", "settings"]\n\
        \n\
        missing_tables = [table for table in required_tables if table not in existing_tables]\n\
        \n\
        if missing_tables:\n\
            print(f"Database not fully initialized. Missing tables: {missing_tables}")\n\
            print("Will initialize database...")\n\
            sys.exit(1)  # Exit with error to trigger initialization\n\
        else:\n\
            print("Database is already initialized with all required tables")\n\
            sys.exit(0)  # Exit successfully, no initialization needed\n\
            \n\
    except Exception as e:\n\
        print(f"Error checking database initialization: {e}")\n\
        sys.exit(1)\n\
else:\n\
    print("No PostgreSQL database configured, skipping initialization check")\n\
    sys.exit(0)\n\
PY\n\
\n\
if [ $? -eq 1 ]; then\n\
    echo "Initializing database with Python script..."\n\
    python /app/docker/init-database.py\n\
    if [ $? -eq 0 ]; then\n\
        echo "Database initialized successfully with Python script"\n\
    else\n\
        echo "Python database initialization failed, but continuing..."\n\
    fi\n\
else\n\
    echo "Database already initialized, skipping initialization"\n\
fi\n\
\n\
# Start Flask app\n\
echo "Starting Flask application..."\n\
exec gunicorn --bind 0.0.0.0:8080 --worker-class eventlet --workers 1 --timeout 120 "app:create_app()"\n\
' > /app/start.sh && chmod +x /app/start.sh

# Expose ports
EXPOSE 8080 5432

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/_health || exit 1

# Copy main initialization script
COPY docker/init.sh /app/init.sh
RUN chmod +x /app/init.sh

# Initialize database and start services
CMD ["/app/start.sh"]
