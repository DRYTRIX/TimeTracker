FROM python:3.11-slim

# Install system dependencies including PostgreSQL
RUN apt-get update && apt-get install -y \
    curl \
    postgresql \
    postgresql-contrib \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create data and logs directories with proper permissions
RUN mkdir -p /data /app/logs /var/lib/postgresql/data && \
    chmod 755 /data && chmod 755 /app/logs && chmod 755 /var/lib/postgresql/data

# Create non-root user
RUN useradd -m -u 1000 timetracker && \
    chown -R timetracker:timetracker /app /data /app/logs /var/lib/postgresql/data

# Create PostgreSQL configuration
RUN mkdir -p /etc/postgresql/main && \
    echo "listen_addresses = '*'" > /etc/postgresql/main/postgresql.conf && \
    echo "port = 5432" >> /etc/postgresql/main/postgresql.conf && \
    echo "data_directory = '/var/lib/postgresql/data'" >> /etc/postgresql/main/postgresql.conf && \
    echo "log_destination = 'stderr'" >> /etc/postgresql/main/postgresql.conf && \
    echo "logging_collector = on" >> /etc/postgresql/main/postgresql.conf && \
    echo "log_directory = 'log'" >> /etc/postgresql/main/postgresql.conf && \
    echo "log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'" >> /etc/postgresql/main/postgresql.conf && \
    echo "log_rotation_age = 1d" >> /etc/postgresql/main/postgresql.conf && \
    echo "log_rotation_size = 10MB" >> /etc/postgresql/main/postgresql.conf

# Create PostgreSQL access configuration
RUN echo "local all all trust" > /etc/postgresql/main/pg_hba.conf && \
    echo "host all all 127.0.0.1/32 trust" >> /etc/postgresql/main/pg_hba.conf && \
    echo "host all all ::1/128 trust" >> /etc/postgresql/main/pg_hba.conf && \
    echo "host all all ::1/128 trust" >> /etc/postgresql/main/pg_hba.conf

# Find binary locations
RUN echo "--- Finding PostgreSQL binaries ---" && \
    find /usr -name "postgres" -type f 2>/dev/null | head -5 && \
    find /usr -name "initdb" -type f 2>/dev/null | head -5 && \
    find /usr -name "pg_ctl" -type f 2>/dev/null | head -5 && \
    find /usr -name "psql" -type f 2>/dev/null | head -5 && \
    echo "--- Checking PATH ---" && \
    echo $PATH && \
    echo "--- Checking which postgres ---" && \
    which postgres || echo "postgres not found in PATH"

# Create symlinks for PostgreSQL binaries and database initialization script
RUN find /usr -name "postgres" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/postgres && \
    find /usr -name "initdb" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/initdb && \
    find /usr -name "pg_ctl" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/pg_ctl && \
    find /usr -name "createdb" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/createdb && \
    find /usr -name "createuser" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/createuser && \
    find /usr -name "psql" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/psql && \
    find /usr -name "pg_isready" -type f 2>/dev/null | head -1 | xargs -I {} ln -sf {} /usr/bin/pg_isready && \
    echo "--- PostgreSQL binaries linked ---" && \
    ls -la /usr/bin/postgres* /usr/bin/initdb /usr/bin/pg_ctl /usr/bin/createdb /usr/bin/createuser /usr/bin/psql /usr/bin/pg_isready 2>/dev/null || echo "Some binaries not found"

# Copy database initialization script
COPY docker/init-db.sh /app/init-db.sh
RUN chmod +x /app/init-db.sh

# Copy supervisor configuration
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create startup script for Flask app
COPY docker/start.sh /app/start.sh
RUN chmod +x /app/start.sh

# Expose ports
EXPOSE 8080 5432

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/_health || exit 1

# Copy main initialization script
COPY docker/init.sh /app/init.sh
RUN chmod +x /app/init.sh

# Initialize database and start services
CMD ["/app/init.sh"]
